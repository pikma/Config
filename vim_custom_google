""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                       ____                   _                               "
"                      / ___| ___   ___   __ _| | ___                          "
"                     | |  _ / _ \ / _ \ / _` | |/ _ \                         "
"                     | |_| | (_) | (_) | (_| | |  __/                         "
"                      \____|\___/ \___/ \__, |_|\___|                         "
"                                        |___/                                 "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Google: for Perforce
" perforce commands
command! -nargs=* -complete=file PEdit :!g4 edit %
command! -nargs=* -complete=file PRevert :!g4 revert %
command! -nargs=* -complete=file PDiff :!g4 diff %

function! s:CheckOutFile()
    if filereadable(expand("%")) && ! filewritable(expand("%"))
        let s:pos = getpos('.')
        let option = confirm("Readonly file, do you want to checkout from p4?"
                    \, "&Yes\n&No", 1, "Question")
        if option == 1
            PEdit
        endif
        edit!
        call cursor(s:pos[1:3])
    endif
endfunction
au FileChangedRO * nested :call <SID>CheckOutFile()


function! G4Blame(on_file)
    " Grab the filename from the argument, use expand() to expand '%'.
    let file = expand(a:on_file)
    " Lock scrolling in right pane
    setl scb
    " Create left pane
    vnew
    " It's 37 columns wide
    vert res 37
    " Get the output, split it on newline and keep empty lines, skip the first 5
    " lines because they're headers we don't need, and put it in starting on line
    " 1 of the left pane
    call setline(1, split(system('g4 blame ' . file), '\n', 1)[5:])
    " Lock scrolling in left pane, turn off word wrap, set the buffer as
    " not-modified, remove any listchars highlighting (common in google code), set
    " it readonly (to make modifications slightly more annoying.
    setl scb nowrap nomod nolist ro
    " Move back to the right pane (not sure if there's a better way to do this?)
    exe "normal \<c-w>\<right>"
    " Get the non-active pane scrolled to the same relative offset.
    syncbind
endfunction

com! -nargs=1 Blame :call G4Blame(<args>)

" GTags
source /usr/share/vim/google/gtags.vim

" Code Search
source /google/src/head/depot/google3/tools/gsearch/contrib/csearch.vim


" Two bindings for GTags: the first one jumps to the word under the cursor, the
" second one also highlights it.
" nmap <C-]> :exe 'Gtlist ' . expand('<cword>')<CR>
nmap <C-]> :exe 'let searchtag= "' . expand('<cword>') . '"' \| :exe 'let @/= "' . searchtag . '"'<CR> \| :exe 'Gtlist ' . searchtag <CR>

" Google Style
source /usr/share/vim/google/google.vim
set expandtab
set shiftwidth=2
set softtabstop=2

" End of Google
